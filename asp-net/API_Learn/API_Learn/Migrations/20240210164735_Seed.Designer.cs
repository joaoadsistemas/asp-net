// <auto-generated />
using System;
using DSLearn.Repositories.db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DSLearn.Migrations
{
    [DbContext(typeof(SystemDbContext))]
    [Migration("20240210164735_Seed")]
    partial class Seed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DSLearn.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImgGrayUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tb_course");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImgGrayUri = "https://upload.wikimedia.org/wikipedia/commons/1/1f/Switch-course-book-grey.svg",
                            ImgUri = "https://cdn.pixabay.com/photo/2018/03/22/10/55/training-course-3250007_1280.jpg",
                            Name = "Bootcamp HTML"
                        });
                });

            modelBuilder.Entity("DSLearn.Entities.Deliver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CorrectCount")
                        .HasColumnType("int");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Moment")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("OfferId", "UserId");

                    b.ToTable("tb_deliver");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LessonId = 4,
                            Moment = new DateTime(2020, 12, 10, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferId = 1,
                            Status = 0,
                            Uri = "https://github.com/devsuperior/bds-dslearn",
                            UserId = "3b01910b-4e21-4cf3-a859-9a79261d0385"
                        });
                });

            modelBuilder.Entity("DSLearn.Entities.Enrollment", b =>
                {
                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EnrollMoment")
                        .HasColumnType("datetime2");

                    b.Property<bool>("OnlyUpdate")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RefundMoment")
                        .HasColumnType("datetime2");

                    b.HasKey("OfferId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("tb_enrollment");

                    b.HasData(
                        new
                        {
                            OfferId = 1,
                            UserId = "3b01910b-4e21-4cf3-a859-9a79261d0385",
                            Available = true,
                            EnrollMoment = new DateTime(2020, 11, 20, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            OnlyUpdate = false
                        },
                        new
                        {
                            OfferId = 2,
                            UserId = "fc8cf0a3-c3d2-49d2-8d20-1e22a6c4b8a7",
                            Available = true,
                            EnrollMoment = new DateTime(2020, 11, 20, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            OnlyUpdate = false
                        });
                });

            modelBuilder.Entity("DSLearn.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("tb_lesson");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("DSLearn.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Moment")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("tb_notification");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Moment = new DateTime(2020, 12, 10, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Read = true,
                            Route = "/offers/1/resource/1/sections/1",
                            Text = "Primeiro feedback de tarefa: favor revisar",
                            UserId = "3b01910b-4e21-4cf3-a859-9a79261d0385"
                        },
                        new
                        {
                            Id = 2,
                            Moment = new DateTime(2020, 12, 12, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Read = true,
                            Route = "/offers/1/resource/1/sections/1",
                            Text = "Segundo feedback: favor revisar",
                            UserId = "3b01910b-4e21-4cf3-a859-9a79261d0385"
                        },
                        new
                        {
                            Id = 3,
                            Moment = new DateTime(2020, 12, 14, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Read = true,
                            Route = "/offers/1/resource/1/sections/1",
                            Text = "Terceiro feedback: favor revisar",
                            UserId = "3b01910b-4e21-4cf3-a859-9a79261d0385"
                        });
                });

            modelBuilder.Entity("DSLearn.Entities.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Edition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndMoment")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartMoment")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("tb_offer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Edition = "1.0",
                            EndMoment = new DateTime(2021, 11, 20, 3, 0, 0, 0, DateTimeKind.Unspecified),
                            StartMoment = new DateTime(2020, 11, 20, 3, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 1,
                            Edition = "2.0",
                            EndMoment = new DateTime(2021, 12, 20, 3, 0, 0, 0, DateTimeKind.Unspecified),
                            StartMoment = new DateTime(2020, 12, 20, 3, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DSLearn.Entities.Reply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Moment")
                        .HasColumnType("datetime2");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("TopicId");

                    b.ToTable("Replys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = "fc8cf0a3-c3d2-49d2-8d20-1e22a6c4b8a7",
                            Body = "Tente reiniciar o computador",
                            Moment = new DateTime(2020, 12, 15, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            TopicId = 1
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = "3b01910b-4e21-4cf3-a859-9a79261d0385",
                            Body = "Deu certo, valeu!",
                            Moment = new DateTime(2020, 12, 20, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            TopicId = 1
                        });
                });

            modelBuilder.Entity("DSLearn.Entities.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("imgUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.ToTable("tb_resource");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Trilha principal do curso",
                            OfferId = 1,
                            Position = 1,
                            Title = "Trilha HTML",
                            Type = 1,
                            imgUri = "https://cdn.pixabay.com/photo/2018/03/22/10/55/training-course-3250007_1280.jpg"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Tire suas dúvidas",
                            OfferId = 1,
                            Position = 2,
                            Title = "Forum",
                            Type = 2,
                            imgUri = "https://cdn.pixabay.com/photo/2018/03/22/10/55/training-course-3250007_1280.jpg"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Lives exclusivas para a turma",
                            OfferId = 1,
                            Position = 3,
                            Title = "Lives",
                            Type = 0,
                            imgUri = "https://cdn.pixabay.com/photo/2018/03/22/10/55/training-course-3250007_1280.jpg"
                        });
                });

            modelBuilder.Entity("DSLearn.Entities.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int?>("PreRequisiteId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PreRequisiteId");

                    b.HasIndex("ResourceId");

                    b.ToTable("tb_section");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Neste capítulo vamos começar",
                            ImgUri = "https://cdn.pixabay.com/photo/2018/03/22/10/55/training-course-3250007_1280.jpg",
                            Position = 1,
                            ResourceId = 1,
                            Title = "Capítulo 1"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Neste capítulo vamos continuar",
                            ImgUri = "https://cdn.pixabay.com/photo/2018/03/22/10/55/training-course-3250007_1280.jpg",
                            Position = 2,
                            PreRequisiteId = 1,
                            ResourceId = 1,
                            Title = "Capítulo 2"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Neste capítulo vamos finalizar",
                            ImgUri = "https://cdn.pixabay.com/photo/2018/03/22/10/55/training-course-3250007_1280.jpg",
                            Position = 3,
                            PreRequisiteId = 2,
                            ResourceId = 1,
                            Title = "Capítulo 3"
                        });
                });

            modelBuilder.Entity("DSLearn.Entities.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Moment")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int?>("ReplyId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("LessonId");

                    b.HasIndex("OfferId");

                    b.HasIndex("ReplyId");

                    b.ToTable("tb_topic");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = "3b01910b-4e21-4cf3-a859-9a79261d0385",
                            Body = "Corpo do tópico 1",
                            LessonId = 1,
                            Moment = new DateTime(2020, 12, 12, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferId = 1,
                            Title = "Título do tópico 1"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = "fc8cf0a3-c3d2-49d2-8d20-1e22a6c4b8a7",
                            Body = "Corpo do tópico 2",
                            LessonId = 1,
                            Moment = new DateTime(2020, 12, 13, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferId = 1,
                            Title = "Título do tópico 2"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = "fc8cf0a3-c3d2-49d2-8d20-1e22a6c4b8a7",
                            Body = "Corpo do tópico 3",
                            LessonId = 1,
                            Moment = new DateTime(2020, 12, 14, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferId = 1,
                            Title = "Título do tópico 3"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = "3b01910b-4e21-4cf3-a859-9a79261d0385",
                            Body = "Corpo do tópico 4",
                            LessonId = 2,
                            Moment = new DateTime(2020, 12, 15, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferId = 1,
                            Title = "Título do tópico 4"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = "3b01910b-4e21-4cf3-a859-9a79261d0385",
                            Body = "Corpo do tópico 5",
                            LessonId = 2,
                            Moment = new DateTime(2020, 12, 16, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferId = 1,
                            Title = "Título do tópico 5"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = "fc8cf0a3-c3d2-49d2-8d20-1e22a6c4b8a7",
                            Body = "Corpo do tópico 6",
                            LessonId = 3,
                            Moment = new DateTime(2020, 12, 17, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            OfferId = 1,
                            Title = "Título do tópico 6"
                        });
                });

            modelBuilder.Entity("DSLearn.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReplyId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ReplyId");

                    b.HasIndex("TopicId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3b01910b-4e21-4cf3-a859-9a79261d0385",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e232e65c-6eaf-4bec-a670-03f79bdae734",
                            Email = "alex@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "$2a$10$eACCYoNOHEqXve8aIWT8Nu3PkMXWBaOxJ9aORUYzfMQCbVBIhZ8tG",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "9495a870-3954-443c-a81e-b2ac3752bd7c",
                            TwoFactorEnabled = false,
                            UserName = "Alex Brown"
                        },
                        new
                        {
                            Id = "fc8cf0a3-c3d2-49d2-8d20-1e22a6c4b8a7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "39a4c971-c582-4747-953c-c04259324c79",
                            Email = "bob@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "$2a$10$eACCYoNOHEqXve8aIWT8Nu3PkMXWBaOxJ9aORUYzfMQCbVBIhZ8tG",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "b1703405-4fce-4b02-96e2-e71a5a92781f",
                            TwoFactorEnabled = false,
                            UserName = "Bob Brown"
                        },
                        new
                        {
                            Id = "a1ff4f6c-5011-4b95-9bda-2bc33693fcac",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "76d7e625-f131-44d2-b4ed-ee813f94fb23",
                            Email = "maria@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "$2a$10$eACCYoNOHEqXve8aIWT8Nu3PkMXWBaOxJ9aORUYzfMQCbVBIhZ8tG",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "5376244a-3a4c-42bc-98cc-199c06dbd64c",
                            TwoFactorEnabled = false,
                            UserName = "Maria Green"
                        });
                });

            modelBuilder.Entity("EnrollmentLesson", b =>
                {
                    b.Property<int>("LessonsDoneId")
                        .HasColumnType("int");

                    b.Property<int>("EnrollmentsDoneOfferId")
                        .HasColumnType("int");

                    b.Property<string>("EnrollmentsDoneUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LessonsDoneId", "EnrollmentsDoneOfferId", "EnrollmentsDoneUserId");

                    b.HasIndex("EnrollmentsDoneOfferId", "EnrollmentsDoneUserId");

                    b.ToTable("EnrollmentLesson");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "ROLE_STUDENT",
                            NormalizedName = "ROLE_STUDENT"
                        },
                        new
                        {
                            Id = "2",
                            Name = "ROLE_INSTRUCTOR",
                            NormalizedName = "ROLE_INSTRUCTOR"
                        },
                        new
                        {
                            Id = "3",
                            Name = "ROLE_ADMIN",
                            NormalizedName = "ROLE_ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3b01910b-4e21-4cf3-a859-9a79261d0385",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "fc8cf0a3-c3d2-49d2-8d20-1e22a6c4b8a7",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "fc8cf0a3-c3d2-49d2-8d20-1e22a6c4b8a7",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "a1ff4f6c-5011-4b95-9bda-2bc33693fcac",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "a1ff4f6c-5011-4b95-9bda-2bc33693fcac",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "a1ff4f6c-5011-4b95-9bda-2bc33693fcac",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OfferUser", b =>
                {
                    b.Property<int>("OffersId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OffersId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("OfferUser");
                });

            modelBuilder.Entity("DSLearn.Entities.Content", b =>
                {
                    b.HasBaseType("DSLearn.Entities.Lesson");

                    b.Property<string>("TextContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoUri")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("tb_content");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Position = 1,
                            SectionId = 1,
                            Title = "Aula 1 do capítulo 1",
                            TextContent = "Material de apoio: abc",
                            VideoUri = "https://www.youtube.com/watch?v=sqbqoR-lMf8"
                        },
                        new
                        {
                            Id = 2,
                            Position = 2,
                            SectionId = 1,
                            Title = "Aula 2 do capítulo 1",
                            TextContent = "",
                            VideoUri = "https://www.youtube.com/watch?v=sqbqoR-lMf8"
                        },
                        new
                        {
                            Id = 3,
                            Position = 3,
                            SectionId = 1,
                            Title = "Aula 3 do capítulo 1",
                            TextContent = "",
                            VideoUri = "https://www.youtube.com/watch?v=sqbqoR-lMf8"
                        });
                });

            modelBuilder.Entity("DSLearn.Entities.Task", b =>
                {
                    b.HasBaseType("DSLearn.Entities.Lesson");

                    b.Property<int>("ApprovalCount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueMoment")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionCount")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.ToTable("tb_task");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Position = 4,
                            SectionId = 1,
                            Title = "Tarefa do capítulo 1",
                            ApprovalCount = 4,
                            Description = "Fazer um trabalho legal",
                            DueMoment = new DateTime(2020, 11, 25, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            QuestionCount = 5,
                            Weight = 1.0
                        });
                });

            modelBuilder.Entity("DSLearn.Entities.Deliver", b =>
                {
                    b.HasOne("DSLearn.Entities.Lesson", "Lesson")
                        .WithMany("Deliveries")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSLearn.Entities.Enrollment", "Enrollment")
                        .WithMany("Deliveries")
                        .HasForeignKey("OfferId", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enrollment");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("DSLearn.Entities.Enrollment", b =>
                {
                    b.HasOne("DSLearn.Entities.Offer", "Offer")
                        .WithMany("Enrollments")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSLearn.Entities.User", "User")
                        .WithMany("Enrollments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DSLearn.Entities.Lesson", b =>
                {
                    b.HasOne("DSLearn.Entities.Section", "Section")
                        .WithMany("Lessons")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("DSLearn.Entities.Notification", b =>
                {
                    b.HasOne("DSLearn.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DSLearn.Entities.Offer", b =>
                {
                    b.HasOne("DSLearn.Entities.Course", "Course")
                        .WithMany("Offers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("DSLearn.Entities.Reply", b =>
                {
                    b.HasOne("DSLearn.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSLearn.Entities.Topic", "Topic")
                        .WithMany("Replies")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("DSLearn.Entities.Resource", b =>
                {
                    b.HasOne("DSLearn.Entities.Offer", "Offer")
                        .WithMany("Resources")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("DSLearn.Entities.Section", b =>
                {
                    b.HasOne("DSLearn.Entities.Section", "PreRequisite")
                        .WithMany()
                        .HasForeignKey("PreRequisiteId");

                    b.HasOne("DSLearn.Entities.Resource", "Resource")
                        .WithMany("Sections")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PreRequisite");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("DSLearn.Entities.Topic", b =>
                {
                    b.HasOne("DSLearn.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSLearn.Entities.Lesson", "Lesson")
                        .WithMany("Topics")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSLearn.Entities.Offer", "Offer")
                        .WithMany("Topics")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSLearn.Entities.Reply", "Reply")
                        .WithMany()
                        .HasForeignKey("ReplyId");

                    b.Navigation("Author");

                    b.Navigation("Lesson");

                    b.Navigation("Offer");

                    b.Navigation("Reply");
                });

            modelBuilder.Entity("DSLearn.Entities.User", b =>
                {
                    b.HasOne("DSLearn.Entities.Reply", null)
                        .WithMany("Likes")
                        .HasForeignKey("ReplyId");

                    b.HasOne("DSLearn.Entities.Topic", null)
                        .WithMany("Likes")
                        .HasForeignKey("TopicId");
                });

            modelBuilder.Entity("EnrollmentLesson", b =>
                {
                    b.HasOne("DSLearn.Entities.Lesson", null)
                        .WithMany()
                        .HasForeignKey("LessonsDoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSLearn.Entities.Enrollment", null)
                        .WithMany()
                        .HasForeignKey("EnrollmentsDoneOfferId", "EnrollmentsDoneUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DSLearn.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DSLearn.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSLearn.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DSLearn.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OfferUser", b =>
                {
                    b.HasOne("DSLearn.Entities.Offer", null)
                        .WithMany()
                        .HasForeignKey("OffersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSLearn.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DSLearn.Entities.Content", b =>
                {
                    b.HasOne("DSLearn.Entities.Lesson", null)
                        .WithOne()
                        .HasForeignKey("DSLearn.Entities.Content", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DSLearn.Entities.Task", b =>
                {
                    b.HasOne("DSLearn.Entities.Lesson", null)
                        .WithOne()
                        .HasForeignKey("DSLearn.Entities.Task", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DSLearn.Entities.Course", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("DSLearn.Entities.Enrollment", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("DSLearn.Entities.Lesson", b =>
                {
                    b.Navigation("Deliveries");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("DSLearn.Entities.Offer", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Resources");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("DSLearn.Entities.Reply", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("DSLearn.Entities.Resource", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("DSLearn.Entities.Section", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("DSLearn.Entities.Topic", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("DSLearn.Entities.User", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
